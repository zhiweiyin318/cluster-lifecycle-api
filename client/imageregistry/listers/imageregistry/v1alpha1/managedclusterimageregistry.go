// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/stolostron/cluster-lifecycle-api/imageregistry/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedClusterImageRegistryLister helps list ManagedClusterImageRegistries.
// All objects returned here must be treated as read-only.
type ManagedClusterImageRegistryLister interface {
	// List lists all ManagedClusterImageRegistries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterImageRegistry, err error)
	// ManagedClusterImageRegistries returns an object that can list and get ManagedClusterImageRegistries.
	ManagedClusterImageRegistries(namespace string) ManagedClusterImageRegistryNamespaceLister
	ManagedClusterImageRegistryListerExpansion
}

// managedClusterImageRegistryLister implements the ManagedClusterImageRegistryLister interface.
type managedClusterImageRegistryLister struct {
	indexer cache.Indexer
}

// NewManagedClusterImageRegistryLister returns a new ManagedClusterImageRegistryLister.
func NewManagedClusterImageRegistryLister(indexer cache.Indexer) ManagedClusterImageRegistryLister {
	return &managedClusterImageRegistryLister{indexer: indexer}
}

// List lists all ManagedClusterImageRegistries in the indexer.
func (s *managedClusterImageRegistryLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterImageRegistry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedClusterImageRegistry))
	})
	return ret, err
}

// ManagedClusterImageRegistries returns an object that can list and get ManagedClusterImageRegistries.
func (s *managedClusterImageRegistryLister) ManagedClusterImageRegistries(namespace string) ManagedClusterImageRegistryNamespaceLister {
	return managedClusterImageRegistryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedClusterImageRegistryNamespaceLister helps list and get ManagedClusterImageRegistries.
// All objects returned here must be treated as read-only.
type ManagedClusterImageRegistryNamespaceLister interface {
	// List lists all ManagedClusterImageRegistries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterImageRegistry, err error)
	// Get retrieves the ManagedClusterImageRegistry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedClusterImageRegistry, error)
	ManagedClusterImageRegistryNamespaceListerExpansion
}

// managedClusterImageRegistryNamespaceLister implements the ManagedClusterImageRegistryNamespaceLister
// interface.
type managedClusterImageRegistryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedClusterImageRegistries in the indexer for a given namespace.
func (s managedClusterImageRegistryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterImageRegistry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedClusterImageRegistry))
	})
	return ret, err
}

// Get retrieves the ManagedClusterImageRegistry from the indexer for a given namespace and name.
func (s managedClusterImageRegistryNamespaceLister) Get(name string) (*v1alpha1.ManagedClusterImageRegistry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedclusterimageregistry"), name)
	}
	return obj.(*v1alpha1.ManagedClusterImageRegistry), nil
}
